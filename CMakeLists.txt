cmake_minimum_required(VERSION 3.0)

if (APPLE)
  set(MACOSX_DEPLOYMENT_TARGET 10.9)
endif()

project(furnace)

if (APPLE)
  enable_language(OBJC)
endif()

set(CMAKE_CXX_STANDARD 14)

set(CMAKE_PROJECT_VERSION_MAJOR 0)
set(CMAKE_PROJECT_VERSION_MINOR 5)
set(CMAKE_PROJECT_VERSION_PATCH 7)

if (ANDROID)
  set(BUILD_GUI_DEFAULT OFF)
  set(USE_RTMIDI_DEFAULT OFF)
  set(SYSTEM_SDL2_DEFAULT ON)
else()
  set(BUILD_GUI_DEFAULT ON)
  set(USE_RTMIDI_DEFAULT ON)
  set(SYSTEM_SDL2_DEFAULT OFF)
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
  pkg_check_modules(JACK jack)
  set(WITH_JACK_DEFAULT ${JACK_FOUND})
else()
  set(WITH_JACK_DEFAULT OFF)
endif()

option(BUILD_GUI "Build the tracker (disable to build only a headless player)" ${BUILD_GUI_DEFAULT})
option(USE_RTMIDI "Build with MIDI support using RtMidi. Currently unfinished." ${USE_RTMIDI_DEFAULT})
option(WITH_JACK "Whether to build with JACK support. Auto-detects if JACK is available" ${WITH_JACK_DEFAULT})
option(SYSTEM_FMT "Use a system-installed version of fmt instead of the vendored one" OFF)
option(SYSTEM_LIBSNDFILE "Use a system-installed version of libsndfile instead of the vendored one" OFF)
option(SYSTEM_RTMIDI "Use a system-installed version of RtMidi instead of the vendored one" OFF)
option(SYSTEM_ZLIB "Use a system-installed version of zlib instead of the vendored one" OFF)
option(SYSTEM_SDL2 "Use a system-installed version of SDL2 instead of the vendored one" ${SYSTEM_SDL2_DEFAULT})
option(WARNINGS_ARE_ERRORS "Whether warnings in furnace's C++ code should be treated as errors" OFF)

set(DEPENDENCIES_INCLUDE_DIRS "")
set(DEPENDENCIES_DEFINES "")
set(DEPENDENCIES_COMPILE_OPTIONS "")
set(DEPENDENCIES_LIBRARIES "")
set(DEPENDENCIES_LIBRARY_DIRS "")
set(DEPENDENCIES_LINK_OPTIONS "")
set(DEPENDENCIES_LEGACY_LDFLAGS "")

if (BUILD_GUI)
  set(SYSTEM_SDL_MIN_VER 2.0.18)
else()
  set(SYSTEM_SDL_MIN_VER 2.0.0)
endif()

list(APPEND DEPENDENCIES_INCLUDE_DIRS "extern/SAASound/include")

find_package(Threads REQUIRED)
list(APPEND DEPENDENCIES_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})

if (SYSTEM_FMT)
  if (PKG_CONFIG_FOUND)
    pkg_check_modules(FMT fmt)
    if (FMT_FOUND)
      list(APPEND DEPENDENCIES_INCLUDE_DIRS ${FMT_INCLUDE_DIRS})
      list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${FMT_CFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LIBRARIES ${FMT_LIBRARIES})
      list(APPEND DEPENDENCIES_LIBRARY_DIRS ${FMT_LIBRARY_DIRS})
      list(APPEND DEPENDENCIES_LINK_OPTIONS ${FMT_LDFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${FMT_LDFLAGS})
    endif()
  endif()
  if (NOT FMT_FOUND)
    find_package(fmt REQUIRED)
    list(APPEND DEPENDENCIES_LIBRARIES fmt::fmt)
  endif()
  message(STATUS "Using system-installed fmt")
else()
  add_subdirectory(extern/fmt EXCLUDE_FROM_ALL)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS extern/fmt/include)
  list(APPEND DEPENDENCIES_LIBRARIES fmt)
  message(STATUS "Using vendored fmt")
endif()

if (SYSTEM_LIBSNDFILE)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(LIBSNDFILE REQUIRED sndfile)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS ${LIBSNDFILE_INCLUDE_DIRS})
  list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${LIBSNDFILE_CFLAGS_OTHER})
  list(APPEND DEPENDENCIES_LIBRARIES ${LIBSNDFILE_LIBRARIES})
  list(APPEND DEPENDENCIES_LIBRARY_DIRS ${LIBSNDFILE_LIBRARY_DIRS})
  list(APPEND DEPENDENCIES_LINK_OPTIONS ${LIBSNDFILE_LDFLAGS_OTHER})
  list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${LIBSNDFILE_LDFLAGS})
  message(STATUS "Using system-installed libsndfile")
else()
  set(BUILD_TESTING OFF CACHE BOOL "aaaaaa" FORCE)
  set(BUILD_PROGRAMS OFF CACHE BOOL "aaa" FORCE)
  set(BUILD_EXAMPLES OFF CACHE BOOL "a" FORCE)
  set(ENABLE_EXTERNAL_LIBS OFF CACHE BOOL "come on" FORCE)
  set(ENABLE_MPEG OFF CACHE BOOL "come on" FORCE)
  add_subdirectory(extern/libsndfile EXCLUDE_FROM_ALL)
  list(APPEND DEPENDENCIES_LIBRARIES sndfile)
  message(STATUS "Using vendored libsndfile")
endif()

if (USE_RTMIDI)
  if (SYSTEM_RTMIDI)
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(RTMIDI REQUIRED rtmidi)
    list(APPEND DEPENDENCIES_INCLUDE_DIRS ${RTMIDI_INCLUDE_DIRS})
    list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${RTMIDI_CFLAGS_OTHER})
    list(APPEND DEPENDENCIES_LIBRARIES ${RTMIDI_LIBRARIES})
    list(APPEND DEPENDENCIES_LIBRARY_DIRS ${RTMIDI_LIBRARY_DIRS})
    list(APPEND DEPENDENCIES_LINK_OPTIONS ${RTMIDI_LDFLAGS_OTHER})
    list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${RTMIDI_LDFLAGS})
    message(STATUS "Using system-installed RtMidi")
  else()
    add_subdirectory(extern/rtmidi EXCLUDE_FROM_ALL)
    list(APPEND DEPENDENCIES_LIBRARIES rtmidi)
    message(STATUS "Using vendored RtMidi")
  endif()
endif()

if (SYSTEM_ZLIB)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(ZLIB REQUIRED zlib)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})
  list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${ZLIB_CFLAGS_OTHER})
  list(APPEND DEPENDENCIES_LIBRARIES ${ZLIB_LIBRARIES})
  list(APPEND DEPENDENCIES_LIBRARY_DIRS ${ZLIB_LIBRARY_DIRS})
  list(APPEND DEPENDENCIES_LINK_OPTIONS ${ZLIB_LDFLAGS_OTHER})
  list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${ZLIB_LDFLAGS})
  message(STATUS "Using system-installed zlib")
else()
  set(BUILD_TESTING OFF CACHE BOOL "aaaaaa" FORCE)
  set(BUILD_PROGRAMS OFF CACHE BOOL "aaa" FORCE)
  set(BUILD_EXAMPLES OFF CACHE BOOL "a" FORCE)
  set(ENABLE_EXTERNAL_LIBS OFF CACHE BOOL "come on" FORCE)
  set(ENABLE_MPEG OFF CACHE BOOL "come on" FORCE)
  add_subdirectory(extern/zlib EXCLUDE_FROM_ALL)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS extern/zlib ${CMAKE_CURRENT_BINARY_DIR}/extern/zlib)
  list(APPEND DEPENDENCIES_LIBRARIES zlibstatic)
  message(STATUS "Using vendored zlib")
endif()

if (SYSTEM_SDL2)
  if (PKG_CONFIG_FOUND)
    pkg_check_modules(SDL2 sdl2>=${SYSTEM_SDL_MIN_VER})
    if (SDL2_FOUND)
      list(APPEND DEPENDENCIES_INCLUDE_DIRS ${SDL2_INCLUDE_DIRS})
      list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${SDL2_CFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LIBRARIES ${SDL2_LIBRARIES})
      list(APPEND DEPENDENCIES_LIBRARY_DIRS ${SDL2_LIBRARY_DIRS})
      list(APPEND DEPENDENCIES_LINK_OPTIONS ${SDL2_LDFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${SDL2_LDFLAGS})
    endif()
  endif()
  if (NOT SDL2_FOUND)
    find_package(SDL2 ${SYSTEM_SDL_MIN_VER} REQUIRED)
    list(APPEND DEPENDENCIES_INCLUDE_DIRS ${SDL2_INCLUDE_DIR})
    list(APPEND DEPENDENCIES_LIBRARIES ${SDL2_LIBRARY})
  endif()
  message(STATUS "Using system-installed SDL2")
else()
  set(SDL_SHARED OFF)
  set(SDL_STATIC ON)
  add_subdirectory(extern/SDL EXCLUDE_FROM_ALL)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS extern/SDL/include)
  list(APPEND DEPENDENCIES_LIBRARIES SDL2-static)
  message(STATUS "Using vendored SDL2")
endif()

set(AUDIO_SOURCES
src/audio/abstract.cpp
src/audio/sdl.cpp
)

if(WITH_JACK)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(JACK REQUIRED jack)
  list(APPEND AUDIO_SOURCES src/audio/jack.cpp)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS ${JACK_INCLUDE_DIRS})
  list(APPEND DEPENDENCIES_DEFINES HAVE_JACK)
  list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${JACK_CFLAGS_OTHER})
  list(APPEND DEPENDENCIES_LIBRARIES ${JACK_LIBRARIES})
  list(APPEND DEPENDENCIES_LIBRARY_DIRS ${JACK_LIBRARY_DIRS})
  list(APPEND DEPENDENCIES_LINK_OPTIONS ${JACK_LDFLAGS_OTHER})
  list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${JACK_LDFLAGS})
  message(STATUS "Building with JACK support")
else()
  message(STATUS "Building without JACK support")
endif()

if (USE_RTMIDI)
  list(APPEND AUDIO_SOURCES src/audio/rtmidi.cpp)
  message(STATUS "Building with RtMidi")
else()
  message(STATUS "Building without RtMidi")
endif()

set(ENGINE_SOURCES
src/log.cpp
src/fileutils.cpp
src/utfutils.cpp

extern/SAASound/src/SAAAmp.cpp
extern/SAASound/src/SAADevice.cpp
extern/SAASound/src/SAAEnv.cpp
extern/SAASound/src/SAAFreq.cpp
extern/SAASound/src/SAAImpl.cpp
extern/SAASound/src/SAANoise.cpp
extern/SAASound/src/SAASndC.cpp
extern/SAASound/src/SAASound.cpp

extern/adpcm/bs_codec.c
extern/adpcm/oki_codec.c
extern/adpcm/yma_codec.c
extern/adpcm/ymb_codec.c
extern/adpcm/ymz_codec.c

extern/Nuked-OPN2/ym3438.c
extern/opm/opm.c
extern/Nuked-OPLL/opll.c
src/engine/platform/sound/sn76496.cpp
src/engine/platform/sound/ay8910.cpp
src/engine/platform/sound/saa1099.cpp
src/engine/platform/sound/gb/apu.c
src/engine/platform/sound/gb/timing.c
src/engine/platform/sound/pce_psg.cpp
src/engine/platform/sound/nes/apu.c

src/engine/platform/sound/c64/sid.cc
src/engine/platform/sound/c64/voice.cc
src/engine/platform/sound/c64/wave.cc
src/engine/platform/sound/c64/envelope.cc
src/engine/platform/sound/c64/filter.cc
src/engine/platform/sound/c64/extfilt.cc
src/engine/platform/sound/c64/pot.cc
src/engine/platform/sound/c64/version.cc

src/engine/platform/sound/c64/wave6581_PS_.cc
src/engine/platform/sound/c64/wave6581_PST.cc
src/engine/platform/sound/c64/wave6581_P_T.cc
src/engine/platform/sound/c64/wave6581__ST.cc
src/engine/platform/sound/c64/wave8580_PS_.cc
src/engine/platform/sound/c64/wave8580_PST.cc
src/engine/platform/sound/c64/wave8580_P_T.cc
src/engine/platform/sound/c64/wave8580__ST.cc

src/engine/platform/sound/tia/TIASnd.cpp

src/engine/platform/sound/ymfm/ymfm_adpcm.cpp
src/engine/platform/sound/ymfm/ymfm_opm.cpp
src/engine/platform/sound/ymfm/ymfm_opn.cpp
src/engine/platform/sound/ymfm/ymfm_opz.cpp
src/engine/platform/sound/ymfm/ymfm_ssg.cpp

src/engine/platform/sound/lynx/Mikey.cpp

src/engine/platform/sound/qsound.c

src/engine/platform/ym2610Interface.cpp

src/engine/blip_buf.c
src/engine/safeReader.cpp
src/engine/safeWriter.cpp
src/engine/config.cpp
src/engine/dispatchContainer.cpp
src/engine/engine.cpp
src/engine/fileOps.cpp
src/engine/instrument.cpp
src/engine/macroInt.cpp
src/engine/pattern.cpp
src/engine/playback.cpp
src/engine/sample.cpp
src/engine/song.cpp
src/engine/sysDef.cpp
src/engine/wavetable.cpp
src/engine/vgmOps.cpp
src/engine/platform/abstract.cpp
src/engine/platform/genesis.cpp
src/engine/platform/genesisext.cpp
src/engine/platform/sms.cpp
src/engine/platform/opll.cpp
src/engine/platform/gb.cpp
src/engine/platform/pce.cpp
src/engine/platform/nes.cpp
src/engine/platform/c64.cpp
src/engine/platform/arcade.cpp
src/engine/platform/ym2610.cpp
src/engine/platform/ym2610ext.cpp
src/engine/platform/ym2610b.cpp
src/engine/platform/ym2610bext.cpp
src/engine/platform/ay.cpp
src/engine/platform/ay8930.cpp
src/engine/platform/tia.cpp
src/engine/platform/saa.cpp
src/engine/platform/amiga.cpp
src/engine/platform/pcspkr.cpp
src/engine/platform/segapcm.cpp
src/engine/platform/qsound.cpp
src/engine/platform/dummy.cpp
src/engine/platform/lynx.cpp
)

if (WIN32)
  list(APPEND ENGINE_SOURCES src/utfutils.cpp)
  list(APPEND ENGINE_SOURCES src/engine/winStuff.cpp)
  list(APPEND ENGINE_SOURCES res/furnace.rc)
endif()

set(GUI_SOURCES
extern/imgui/imgui.cpp
extern/imgui/imgui_draw.cpp
extern/imgui/imgui_tables.cpp
extern/imgui/imgui_widgets.cpp
extern/imgui_patched/imgui_impl_sdlrenderer.cpp
extern/imgui_patched/imgui_impl_sdl.cpp
extern/imgui/misc/cpp/imgui_stdlib.cpp
extern/igfd/ImGuiFileDialog.cpp

src/gui/plot_nolerp.cpp
src/gui/font_exo.cpp
src/gui/font_liberationSans.cpp
src/gui/font_mononoki.cpp
src/gui/font_plexMono.cpp
src/gui/font_plexSans.cpp
src/gui/font_proggyClean.cpp
src/gui/font_ptMono.cpp
src/gui/font_unifont.cpp
src/gui/font_icon.cpp
src/gui/fonts.cpp
src/gui/debug.cpp

src/gui/intConst.cpp
src/gui/guiConst.cpp

src/gui/insEdit.cpp
src/gui/orders.cpp
src/gui/pattern.cpp
src/gui/settings.cpp
src/gui/util.cpp
src/gui/gui.cpp
)

if (APPLE)
  list(APPEND GUI_SOURCES src/gui/macstuff.m)
endif()

if (NOT WIN32 AND NOT APPLE)
  list(APPEND GUI_SOURCES src/gui/icon.c)
endif()

set(USED_SOURCES ${ENGINE_SOURCES} ${AUDIO_SOURCES} src/main.cpp)

if (BUILD_GUI)
  list(APPEND USED_SOURCES ${GUI_SOURCES})
  list(APPEND DEPENDENCIES_INCLUDE_DIRS
    extern/imgui
    extern/imgui_conf
    extern/imgui/backends
    extern/IconFontCppHeaders
    extern/igfd
  )
  list(APPEND DEPENDENCIES_DEFINES HAVE_GUI)
  message(STATUS "Building GUI")
else()
  message(STATUS "Building headless")
endif()

if (WIN32)
  list(APPEND DEPENDENCIES_LIBRARIES shlwapi)
  if (NOT MSVC)
    list(APPEND DEPENDENCIES_LIBRARIES -static)
  endif()
endif()

if (APPLE)
  find_library(COCOA Cocoa REQUIRED)
  list(APPEND DEPENDENCIES_LIBRARIES ${COCOA})
endif()

if (NOT MSVC)
  set(WARNING_FLAGS -Wall -Wextra -Wno-unused-parameter)
  if (WARNINGS_ARE_ERRORS)
    list(APPEND WARNING_FLAGS -Werror)
  endif()
else()
  # /wd4100 == -Wno-unused-parameter
  add_compile_options("/source-charset:utf-8")
  set(WARNING_FLAGS /W4 /wd4100 /D_CRT_SECURE_NO_WARNINGS)
  if (WARNINGS_ARE_ERRORS)
    list(APPEND WARNING_FLAGS /WX)
  endif()
endif()
# Nicer but cannot be narrowed down to just C++
# target_compile_options(furnace PRIVATE ${WARNING_FLAGS})
string(REPLACE ";" " " WARNING_FLAGS_STRING "${WARNING_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS_STRING}")
if (WARNINGS_ARE_ERRORS)
  message(WARNING
    "Treating all warnings in furnace's C++ code as errors! "
    "Please report any errors you encounter on the bug tracker."
  )
endif()

if (MSVC)
  add_executable(furnace WIN32 ${USED_SOURCES})
else()
  add_executable(furnace ${USED_SOURCES})
endif()

target_include_directories(furnace SYSTEM PRIVATE ${DEPENDENCIES_INCLUDE_DIRS})
target_compile_definitions(furnace PRIVATE ${DEPENDENCIES_DEFINES} IMGUI_USER_CONFIG="imconfig_fur.h")
target_compile_options(furnace PRIVATE ${DEPENDENCIES_COMPILE_OPTIONS})
target_link_libraries(furnace PRIVATE ${DEPENDENCIES_LIBRARIES})
if (PKG_CONFIG_FOUND AND (SYSTEM_FMT OR SYSTEM_LIBSNDFILE OR SYSTEM_ZLIB OR SYSTEM_SDL2 OR SYSTEM_RTMIDI OR WITH_JACK))
  if ("${CMAKE_VERSION}" VERSION_LESS "3.13")
    message(WARNING
      "CMake version is <3.13, using old pkg-config LDFLAGS. "
      "You may encounter linking problems with these!"
    )
    target_link_libraries(furnace PRIVATE ${DEPENDENCIES_LEGACY_LDFLAGS})
  else()
    target_link_directories(furnace PRIVATE ${DEPENDENCIES_LIBRARY_DIRS})
    target_link_options(furnace PRIVATE ${DEPENDENCIES_LINK_OPTIONS})
  endif()
endif()

install(TARGETS furnace RUNTIME DESTINATION bin)

if (NOT WIN32 AND NOT APPLE)
  include(GNUInstallDirs)
  install(FILES res/furnace.desktop DESTINATION ${CMAKE_INSTALL_DATADIR}/applications)
  install(FILES res/furnace.appdata.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/metainfo)
  install(DIRECTORY papers DESTINATION ${CMAKE_INSTALL_DOCDIR})
  install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DATADIR}/licenses/furnace)
  install(DIRECTORY demos DESTINATION ${CMAKE_INSTALL_DATADIR}/furnace)
  install(FILES res/logo.png RENAME furnace.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/1024x1024/apps)
endif()

set(CPACK_PACKAGE_NAME "Furnace")
set(CPACK_PACKAGE_VENDOR "tildearrow")
set(CPACK_PACKAGE_DESCRIPTION "free and open-source chiptune tracker")

if (APPLE)
  set(CPACK_GENERATOR Bundle)
  set(CPACK_DMG_SLA_DIR ${CMAKE_SOURCE_DIR}/res/macLicense)
  set(CPACK_DMG_SLA_LANGUAGES en)
  set(CPACK_BUNDLE_NAME "Furnace")
  set(CPACK_DMG_VOLUME_NAME "Furnace")
  set(CPACK_BUNDLE_PLIST ${CMAKE_SOURCE_DIR}/res/Info.plist)
  set(CPACK_BUNDLE_ICON ${CMAKE_SOURCE_DIR}/res/icon.icns)
  set(CPACK_BUNDLE_STARTUP_COMMAND "furnace")
endif()

include(CPack)
